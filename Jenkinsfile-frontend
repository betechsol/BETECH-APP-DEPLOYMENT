/* groovylint-disable DuplicateStringLiteral */
/* groovylint-disable-next-line CompileStatic */
pipeline {
    agent { label 'Build Server' }

    environment {
        REPO_URL = 'https://github.com/betechsol/BETECH-APP-DEPLOYMENT.git'
        BRANCH = 'main'
        FRONTEND_DIR = 'betech-login-frontend'
        DOCKER_IMAGE_FRONTEND = 'betechinc/betech-app-deployment_betechnet-frontend'
        BUILD_NUMBER = 'v2.0'
        SONARQUBE_SERVER = 'SonarQubeServer'
        DOCKERHUB_CREDENTIALS = 'dockerhub-creds'
        NEXUS_URL = 'http://172.31.35.139:8081'
        // Repository where we will upload the artifact
        NEXUS_REPOSITORY = 'betech-login-frontend'
        // Jenkins credential id to authenticate to Nexus OSS
        NEXUS_CREDENTIAL_ID = 'nexus-creds'
        SLACK_CHANNEL = '#devops-team'
        SLACK_CREDENTIALS = 'slack-token-id'
        NODEJS_NAME = 'nodeJS'
        NPM_REGISTRY_URL = 'http://35.93.198.109:8081/repository/betech-login-frontend-snapshot/'
        SONAR_PROJECT_KEY = 'betech-login-frontend'
        SONAR_PROJECT_NAME = 'betech-login-frontend'
        SONAR_PROJECT_VERSION = '1.0'
        DEP_CHECK_EXCLUDES = '**/node_modules/**,' +
                             '**/dependency-check-report.*,' +
                             '**/dependency-check/**,' +
                             '**/dependency-check-jenkins.html'
        DEP_CHECK_FORMAT = 'ALL'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "${BRANCH}"]],
                    userRemoteConfigs: [[url: "${REPO_URL}"]],
                    extensions: [
                        [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [
                            [path: 'betech-login-frontend']
                        ]]
                    ]
                ])
            }
        }

        stage('Frontend Test & Build Artifacts') {
            steps {
                withCredentials([
                    usernamePassword(
                        credentialsId: "${NEXUS_CREDENTIAL_ID}",
                        usernameVariable: 'NEXUS_USER',
                        passwordVariable: 'NEXUS_PASS'
                    )
                ]) {
                    nodejs(nodeJSInstallationName: "${NODEJS_NAME}") {
                        sh '''
                            AUTH=$(echo -n "$NEXUS_USER:$NEXUS_PASS" | base64)
                            echo "registry=${NPM_REGISTRY_URL}" > .npmrc
                            echo "//$(echo ${NPM_REGISTRY_URL} | sed 's|http://||'):_auth=$AUTH" >> .npmrc
                        '''
                        sh 'npm install'
                        sh 'npm run test || true'
                        sh 'npm run build'
                    }
                }
            }
        }

        stage('Frontend SCA') {
            steps {
                nodejs(nodeJSInstallationName: "${NODEJS_NAME}") {
                    sh """
                        sudo dependency-check.sh \
                          --project ${SONAR_PROJECT_KEY} \
                          --scan . \
                          --exclude ${DEP_CHECK_EXCLUDES} \
                          --format ${DEP_CHECK_FORMAT} \
                          --disableYarnAudit
                    """
                }
            }
        }

        stage('SonarQube Scan Frontend') {
            steps {
                withSonarQubeEnv("${SONARQUBE_SERVER}") {
                    sh """
                        sonar-scanner \
                          -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                          -Dsonar.projectName=${SONAR_PROJECT_NAME} \
                          -Dsonar.projectVersion=${SONAR_PROJECT_VERSION} \
                          -Dsonar.dependencyCheck.jsonReportPath=dependency-check-report.json \
                          -Dsonar.dependencyCheck.htmlReportPath=dependency-check-report.html \
                          -Dsonar.exclusions=${DEP_CHECK_EXCLUDES}
                    """
                }
            }
        }

        stage('Wait for QualityGates') {
            steps { 
                echo 'Running Quality Gates to verify the code quality'
                timeout(time: 1, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        
        stage('Frontend OWASP Dependency-Check Scan') {
            steps {
                dependencyCheck additionalArguments: '', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('Build Docker Images') {
            steps {
                withDockerRegistry(credentialsId: "${DOCKERHUB_CREDENTIALS}", url: 'https://index.docker.io/v1/') {
                    sh 'docker system prune -f'
                    sh 'docker container prune -f'
                    sh "docker build -t ${DOCKER_IMAGE_FRONTEND}:${BUILD_NUMBER} ."
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                sh """
                    trivy image --exit-code 0 --severity HIGH,CRITICAL \
                        --format table -o betech-frontend-scan.html \
                        ${DOCKER_IMAGE_FRONTEND}:${BUILD_NUMBER}
                """
            }
        }
        
        stage('Publish Frontend Artifact to Nexus') {
            steps {
                nodejs(nodeJSInstallationName: "${NODEJS_NAME}") {
                    sh 'npm publish || true'
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                withDockerRegistry(credentialsId: "${DOCKERHUB_CREDENTIALS}", url: '') {
                    sh "docker push ${DOCKER_IMAGE_FRONTEND}:${BUILD_NUMBER}"
                }
            }
        }
    }

// Post build alerts 
    post {
        always {
            script {
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
                def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'

                def body = """
                    <html>
                    <body>
                    <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                    <h2>${jobName} - Build ${buildNumber}</h2>
                    <div style="background-color: ${bannerColor}; padding: 10px;">
                    <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                    </div>
                    <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
                    </div>
                    </body>
                    </html>
                """

                emailext (
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                    body: body,
                    to: 'betechincorporated@gmail.com',
                    from: 'jenkins@example.com',
                    replyTo: 'jenkins@example.com',
                    mimeType: 'text/html',
                    attachmentsPattern: '*.html'
                )
            }

            script {
                archiveArtifacts artifacts: '**/dependency-check-report.xml', allowEmptyArchive: true
            }
        }

        success {
            slackSend (
                channel: "${SLACK_CHANNEL}",
                color: '#36a64f',
                message: "Build #${BUILD_NUMBER} for ${env.JOB_NAME} succeeded! :white_check_mark:"
            )
        }

        failure {
            script {
                def failedStage = ''
                def flowNodes = currentBuild.rawBuild.getExecution().getCurrentHeads()
                if (flowNodes && flowNodes.size() > 0) {
                    failedStage = flowNodes[0].displayName
                }
                slackSend (
                    channel: "${SLACK_CHANNEL}",
                    color: '#FF0000',
                    message: "Build #${BUILD_NUMBER} for ${env.JOB_NAME} failed in stage: ${failedStage} :x:"
                )
            }
        }

        unstable {
            slackSend (
                channel: "${SLACK_CHANNEL}",
                color: '#FFA500',
                message: "Build #${BUILD_NUMBER} for ${env.JOB_NAME} is unstable. :warning:"
            )
        }
    }    
}
