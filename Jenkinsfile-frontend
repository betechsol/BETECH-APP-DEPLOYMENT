pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/betechsol/BETECH-APP-DEPLOYMENT.git'
        BRANCH = 'main'
        FRONTEND_DIR = 'betech-login-frontend'
        DOCKER_IMAGE_FRONTEND = 'betechinc/betech-app-deployment_betechnet-frontend'
        BUILD_NUMBER = 'v2.0'
        SONARQUBE_SERVER = 'SonarQubeServer'
        DOCKERHUB_CREDENTIALS = 'dockerhub-creds'
        NEXUS_URL = "http://172.31.35.139:8081"
        // Repository where we will upload the artifact
        NEXUS_REPOSITORY = "betech-login-backend"
        // Jenkins credential id to authenticate to Nexus OSS
        NEXUS_CREDENTIAL_ID = "nexus-creds"
        SLACK_CHANNEL = '#devops-team'
        SLACK_CREDENTIALS = 'slack-token-id'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${BRANCH}", url: "${REPO_URL}"
            }
        }
        
        // This stage tests and packages the frontend artifacts.
        stage('Frontend Test & Build Artifacts') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${NEXUS_CREDENTIAL_ID}", usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                    nodejs(nodeJSInstallationName: 'nodeJS') {
                        dir("${FRONTEND_DIR}") {
                            sh 'AUTH=$(echo -n "$NEXUS_USER:$NEXUS_PASS" | base64)'
                            sh 'echo "registry=http://35.93.198.109:8081/repository/betech-login-frontend-snapshot/" > .npmrc'
                            sh 'echo "//35.93.198.109:8081/repository/betech-login-frontend-snapshot/:_auth=$AUTH" >> .npmrc'
                            sh 'npm install'
                            sh 'npm run test || true'
                            sh 'npm run build'
                        }
                    }
                }
            }
        }
        
        // This stage will generate both HTML and XML dependency-check-reports.
        stage('Frontend SCA') {
            steps {
                nodejs(nodeJSInstallationName: 'nodeJS') {
                    dir("${FRONTEND_DIR}") {
                        sh 'sudo dependency-check.sh --project betech-login-frontend --scan . --exclude **/node_modules/**,**/dependency-check-report.*,**/dependency-check/** --format ALL --disableYarnAudit'
                    }
                }
            }
        }
        
        
        // This stage performs the SonarQube Scan on the frontend artifacts.
        stage('SonarQube Scan Frontend') {
            steps {
                dir("${FRONTEND_DIR}") {
                    withSonarQubeEnv("${SONARQUBE_SERVER}") {
                        sh """
                            sonar-scanner \
                              -Dsonar.projectKey=betech-login-frontend \
                              -Dsonar.projectName=betech-login-frontend \
                              -Dsonar.projectVersion=1.0 \
                              -Dsonar.dependencyCheck.jsonReportPath=dependency-check-report.json \
                              -Dsonar.dependencyCheck.htmlReportPath=dependency-check-report.html \
                              -Dsonar.exclusions=**/dependency-check-report.*,**/dependency-check/**
                        """
                    }
                }
            }
        }


        // Wait for quality gate results from SonarQube Scan.
        stage('Wait for QualityGates') {
            steps { 
                echo "Running Quality Gates to verify the code quality"
                script {
                    timeout(time: 1, unit: 'MINUTES') {
                    def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        
        
        // This stage publishes the OWASP Dependency-Check report.
        stage('Frontend OWASP Dependency-Check Scan') {
            steps {
                dir('${FRONTEND_DIR}') {
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }

        
        // This stage builds the Docker images for the frontend application.
        stage('Build Docker Images') {
            steps {
                withDockerRegistry(credentialsId: 'dockerhub-creds', url: 'https://index.docker.io/v1/') {
                    script {
                        sh 'docker system prune -f'
                        sh 'docker container prune -f'
                    }
                    dir("${FRONTEND_DIR}") {
                        script {
                            sh "docker build -t ${DOCKER_IMAGE_FRONTEND}:${BUILD_NUMBER} ."
                        }
                    }
                }
            }
        }

        
        // This stage scans the frontend image after the build
        stage('Trivy Image Scan') {
            steps {
                sh "trivy image --exit-code 0 --severity HIGH,CRITICAL --format table -o betech-frontend-scan.html ${DOCKER_IMAGE_FRONTEND}:${BUILD_NUMBER}"
            }
        }
        
        // This stage publishes the backend artifacts to the frontend repository
        stage('Publish Frontend Artifact to Nexus') {
            steps {
                nodejs(nodeJSInstallationName: 'nodeJS') {
                    dir("${FRONTEND_DIR}") {
                        // sh '''
                        //     AUTH=$(echo -n "$NEXUS_USER:$NEXUS_PASS" | base64)
                        //     '''
                        // npm set registry=${NEXUS_URL}/repository/betech-frontend-snapshot/
                        // npm set //${NEXUS_URL}/repository/betech-frontend-snapshot/:_auth=${AUTH}
                        sh 'npm publish || true'
                    }
                }
            }
        }


        // This stage pushes the Docker images to the remote DockerHub repository
        stage('Push Docker Images') {
            steps {
                withDockerRegistry(credentialsId: 'dockerhub-creds', url: '') {
                    sh "docker push ${DOCKER_IMAGE_FRONTEND}:${BUILD_NUMBER}"
                }
            }
        }
    
    // Post build alerts 
     post {
            always {
                script {
                    def jobName = env.JOB_NAME
                    def buildNumber = env.BUILD_NUMBER
                    def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
                    def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'
                    
                    def body = """
                        <html>
                        <body>
                        <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                        <h2>${jobName} - Build ${buildNumber}</h2>
                        <div style="background-color: ${bannerColor}; padding: 10px;">
                        <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                        </div>
                        <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
                        </div>
                        </body>
                        </html>
                    """
                    
                    emailext (
                        subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                        body: body,
                        to: 'betechincorporated@gmail.com',
                        from: 'jenkins@example.com',
                        replyTo: 'jenkins@example.com',
                        mimeType: 'text/html',
                        attachmentsPattern: '*.html'
                    )
                }
                
                script {
                   archiveArtifacts artifacts: '**/dependency-check-report.xml', allowEmptyArchive: true 
                }
            }
    
            success {
                slackSend (
                    channel: "${SLACK_CHANNEL}",
                    color: '#36a64f',
                    message: "Build #${BUILD_NUMBER} for ${env.JOB_NAME} succeeded! :white_check_mark:"
                )
            }
            failure {
                script {
                    def failedStage = ''
                    def flowNodes = currentBuild.rawBuild.getExecution().getCurrentHeads()
                    if (flowNodes && flowNodes.size() > 0) {
                        failedStage = flowNodes[0].displayName
                    }
                    slackSend (
                        channel: "${SLACK_CHANNEL}",
                        color: '#FF0000',
                        message: "Build #${BUILD_NUMBER} for ${env.JOB_NAME} failed in stage: ${failedStage} :x:"
                    )
                }
            }
            unstable {
                slackSend (
                    channel: "${SLACK_CHANNEL}",
                    color: '#FFA500',
                    message: "Build #${BUILD_NUMBER} for ${env.JOB_NAME} is unstable. :warning:"
                )
            }
        }    
    }
}